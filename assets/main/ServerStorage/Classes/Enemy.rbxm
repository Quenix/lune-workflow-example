<roblox version="4">
  <Item class="ModuleScript" referent="0">
    <Properties>
      <string name="Name">Enemy</string>
      <BinaryString name="AttributesSerialize"></BinaryString>
      <bool name="DefinesCapabilities">false</bool>
      <Content name="LinkedSource">
        <null>
        </null>
      </Content>
      <string name="Source">local CollectionService = game:GetService("CollectionService")
local ServerStorage = game:GetService("ServerStorage")
local GameSettings = require(ServerStorage.Configurations.GameSettings)

local EnemiesFolder = ServerStorage.Enemies
local enemies = {}
for _, child in ipairs(EnemiesFolder:GetChildren()) do
	enemies[child.Name] = child
end

local Events = ServerStorage.Events
local hitPlatformEvent = Events.HitPlatform

local Enemy = {}
Enemy.__index = Enemy

local UPDATE_TIME_INTERVAL = 1/15

-- Enemy constructor
function Enemy.new(enemyType, location, target, difficulty)
	assert(enemies[enemyType], "Invalid enemy type")
	
	local self = setmetatable({}, Enemy)
	
	self._model = enemies[enemyType]:Clone()	
	
	-- Disable unnecessary behaviors of humanoid to make game more efficient
	self._model.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Jumping, false)
	self._model.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Climbing, false)
	self._model.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Swimming, false)
	
	-- Set enemy health based on difficulty
	self._model.Humanoid.MaxHealth = GameSettings.EnemyHealthDifficulty[difficulty]
	self._model.Humanoid.Health = GameSettings.EnemyHealthDifficulty[difficulty]
	
	-- Tag the enemy's model
	CollectionService:AddTag(self._model, "Enemy")
	
	self._model.Humanoid.Died:Connect(function()
		self:_destroy()
	end)
	
	self._model.HumanoidRootPart.Touched:Connect(function(otherPart) 
		self:_onTouch(otherPart)
	end)
	
	self._target = target
	self._active = false
	
	self._model:SetPrimaryPartCFrame(location)
	self._model.Parent = game.Workspace.Targets
	
	return self
end

function Enemy:_update()
	if self._model and self._model:FindFirstChild("Humanoid") then
		local targetPosition = self._target.PrimaryPart.Position
		local targetVelocity = self._target.PrimaryPart.AssemblyLinearVelocity
		local predictedPosition = targetPosition + targetVelocity * 4
		self._model.Humanoid:MoveTo(targetPosition)
	end
end

-- Main enemy loop
function Enemy:start()
	coroutine.wrap(function()
		self._active = true
		while(self._active) do
			self:_update()
			wait(UPDATE_TIME_INTERVAL)
		end
	end)()
end

function Enemy:stop()
	self._active = false
	self._model.Humanoid.WalkSpeed = 0
end

function Enemy:_destroy()
	self._model:Destroy()
end

function Enemy:_onTouch(otherPart)
	if self._active and CollectionService:HasTag(otherPart, "Platform") then
		hitPlatformEvent:Fire()
		self:stop()
		self:_destroy()
	end
end

return Enemy</string>
      <int64 name="SourceAssetId">-1</int64>
      <BinaryString name="Tags"></BinaryString>
    </Properties>
  </Item>
</roblox>